source(r/functions.R)
source("r/functions.R")
source("./r/functions.R")
source("r/functions.R")
setwd("C:/Users/Administrador.000/Desktop/Sebastian/Repos/diabetes")
source("r/functions.R")
binary.partition<-function(dataset,pct,variable){
numvar<-which(colnames(dataset)=="variable")
dataset<-arrange_(dataset,.dots=(paste("desc(",variable,")",sep="")))
n<-nrow(dataset)
ones<-sum(dataset[,variable])
zeros<-nrow(dataset)-ones
partones<-map(pct,~round(.*ones))
partzeros<-map(pct,~round(.*zeros))
suma<-sum(flatten_dbl(partzeros))+sum(flatten_dbl(partones))
a<-cumsum(flatten_dbl(partones))
b<-cumsum(flatten_dbl(partzeros))
dataones<-dataset[1:ones,]
datazeros<-dataset[(ones+1):nrow(dataset),]
train<-bind_rows(dataones[1:a[1],],datazeros[1:b[1],])
validate<-bind_rows(dataones[(a[1]+1):a[2],],
datazeros[(b[1]+1):b[2],])
test<-bind_rows(dataones[(a[2]+1):nrow(dataones),],
datazeros[(b[2]+1):nrow(datazeros),])
lista<-list(train,validate,test)
names(lista)<-c("train","validate","test")
return(lista)
}
library(tidyverse)
library(MASS)
library(rpart)
library(naivebayes)
library(class)
library(modelr)
library(caret)
library(tree)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
library(klaR)
source("r/functions.R")
dataset<-read_csv("data/diabetes.txt",col_names=c("timespreg","plaglu",
"diastolic","triceps",
"serum","bmi","diabped",
"age","diabetes"))
plotlist<-multiplehist(dataset)
histograms<-multiplot(plotlist = plotlist,cols=3)
cor(dataset)
ggplot()+geom_tile(data=cor(dataset),aes(x=var1, y=var2,fill=value))
gather(cor(dataset),key = var2,value = value)
gather(as.data.frame(cor(dataset)),key = var2,value = value)
as.data.frame(cor(dataset))
a<-as.data.frame(cor(dataset))
a<-rownames_to_column(a,var = var1)
a<-rownames_to_column(a,var = "var1")
gather(a,key = var2,value = value)
a<-as.data.frame(cor(dataset))
a
a<-rownames_to_column(a,var = "var1")
a
View(a)
View(a)
gather(a,key = var2,value = value)
gather(a,timespreg:diabetes,key = var2,value = value)
a<-gather(a,timespreg:diabetes,key = var2,value = value)
ggplot()+geom_tile(data=cor(dataset),aes(x=var1, y=var2,fill=value))
ggplot()+geom_tile(data=a,aes(x=var1, y=var2,fill=value))
corr<-as.data.frame(cor(dataset)) %>%
rownames_to_column(var = "var1") %>%
gather(a,timespreg:diabetes,key = var2,value = value)
corr<-as.data.frame(cor(dataset)) %>%
rownames_to_column(var = "var1") %>%
gather(timespreg:diabetes,key = var2,value = value)
ggplot()+geom_tile(data=corr,aes(x=var1, y=var2,fill=value))
ggplot()+geom_tile(data=corr,aes(x=var2, y=var1,fill=value))
colSums(dataset==0)
prop.table(dataset$diabetes)
table(dataset$diabetes)
colSums(is.na(dataset))
colSums(dataset==0)
View(corr)
ggplot()+geom_tile(data=corr,aes(x=var2, y=parse_factor(var1),fill=value))
ggplot()+geom_tile(data=corr,aes(x=var2, y=parse_factor(var1,levels=colnames(dataset)),fill=value))
ggplot()+geom_tile(data=corr,aes(x=parse_factor(var2,levels=colnames(dataset)), y=parse_factor(var1,levels=colnames(dataset)),fill=value))
ggplot()+geom_tile(data=corr,aes(x=var1, y=var2,fill=value))
finaldataset<-dataset[dataset$plaglu!=0,]
finaldataset<-finaldataset[finaldataset$bmi!=0,]
finaldataset<-finaldataset[,c(-4,-5)]
diastolic<-dataset[dataset$diastolic!=0,]
mu<-mean(diastolic$diastolic)
finaldataset<-mutate(finaldataset,diastolic=ifelse(diastolic==0,mu,diastolic))
rm(diastolic)
normalize<-as.data.frame(scale(finaldataset[,-7]))
normalize$diabetes<-finaldataset$diabetes
finaldataset$diabetes<-parse_factor(finaldataset$diabetes,levels=c("Yes","No"))
finaldataset$diabetes<-parse_factor(finaldataset$diabetes,levels=c(0,1))
View(finaldataset)
View(finaldataset)
finaldataset<-dataset[dataset$plaglu!=0,]
finaldataset<-finaldataset[finaldataset$bmi!=0,]
finaldataset<-finaldataset[,c(-4,-5)]
diastolic<-dataset[dataset$diastolic!=0,]
mu<-mean(diastolic$diastolic)
finaldataset<-mutate(finaldataset,diastolic=ifelse(diastolic==0,mu,diastolic))
rm(diastolic)
finaldataset$diabetes<-factor(finaldataset$diabetes,levels=c("Yes","No"))
finaldataset<-dataset[dataset$plaglu!=0,]
finaldataset<-finaldataset[finaldataset$bmi!=0,]
finaldataset<-finaldataset[,c(-4,-5)]
diastolic<-dataset[dataset$diastolic!=0,]
mu<-mean(diastolic$diastolic)
finaldataset<-mutate(finaldataset,diastolic=ifelse(diastolic==0,mu,diastolic))
rm(diastolic)
finaldataset$diabetes<-factor(finaldataset$diabetes,levels=c(0,1))
str(finaldataset$diabetes)
levels(finaldataset$diabetes)
table(finaldataset$diabetes)
levels(finaldataset$diabetes)<-levels(c("No","Yes"))
levels(finaldataset$diabetes)<-levels(finaldataset$diabetes,c("No","Yes"))
levels(finaldataset$diabetes)<-c("No","Yes")
table(finaldataset$diabetes)
dataset$diabetes<-factor(dataset$diabetes,levels=c(0,1))
levels(dataset$diabetes)<-c("No","Yes")
corr<-as.data.frame(cor(dataset)) %>%
rownames_to_column(var = "var1") %>%
gather(timespreg:diabetes,key = var2,value = value)
corr<-as.data.frame(cor(dataset)) %>%
rownames_to_column(var = "var1") %>%
gather(timespreg:diabetes,key = var2,value = value)
corr<-as.data.frame(cor(dataset[,-9])) %>%
rownames_to_column(var = "var1") %>%
gather(timespreg:diabetes,key = var2,value = value)
corr<-as.data.frame(cor(dataset[,-9])) %>%
rownames_to_column(var = "var1") %>%
gather(timespreg:age,key = var2,value = value)
ggplot()+geom_tile(data=corr,aes(x=var1, y=var2,fill=value))
finaldataset<-dataset[dataset$plaglu!=0,]
finaldataset<-finaldataset[finaldataset$bmi!=0,]
finaldataset<-finaldataset[,c(-4,-5)]
diastolic<-dataset[dataset$diastolic!=0,]
mu<-mean(diastolic$diastolic)
finaldataset<-mutate(finaldataset,diastolic=ifelse(diastolic==0,mu,diastolic))
rm(diastolic)
trainidx<-createDataPartition(y = finaldataset$diabetes,
times = 2,list = FALSE,p = 0.7)
View(trainidx)
View(trainidx)
trainidx<-createDataPartition(y = finaldataset$diabetes,
list = FALSE,p = 0.7)
train<-finaldataset[trainidx,]
notrain<-finaldataset[-trainidx,]
testidx<-createDataPartition(y=notrain$diabetes,list=FALSE,p=0.5)
test<-notrain[testidx,]
validate<-notrain[-testidx,]
mean(train$diabetes)
table(train$diabetes)
table(test$diabetes)
table(validate$diabetes)
table(train$diabetes)/nrow(train)
table(test$diabetes)/nrow(test)
table(validate$diabetes)/nrow(validate)
set.seed(1234)
trainidx<-createDataPartition(y = finaldataset$diabetes,
list = FALSE,p = 0.7)
train<-finaldataset[trainidx,]
notrain<-finaldataset[-trainidx,]
testidx<-createDataPartition(y=notrain$diabetes,list=FALSE,p=0.5)
test<-notrain[testidx,]
validate<-notrain[-testidx,]
table(train$diabetes)/nrow(train)
table(test$diabetes)/nrow(test)
table(validate$diabetes)/nrow(validate)
dtree<-rpart(diabetes~.,data=train,method="class")
dtree<-rpart(diabetes~.,data=train,method="class")
summary(dtree)
plot(dtree)
text(dtree,use.n=TRUE,all=TRUE,cex=0.9,)
plot(dtree)
text(dtree,use.n=TRUE,all=TRUE,cex=0.5)
plot(dtree)
text(dtree,use.n=TRUE,cex=0.5)
text(dtree,use.n=TRUE,cex=0.5,fancy = TRUE)
plot(dtree)
text(dtree,use.n=TRUE,cex=0.5,pretty = 0)
fancyRpartPlot(dtree)
text(dtree,use.n=TRUE,cex=0.5,all=TRUE)
plot(dtree)
text(dtree,use.n=TRUE,cex=0.5,all=TRUE)
rpart.plot(dtree)
rpart.plot(dtree,type=1)
plot(dtree,uniform = TRUE)
text(dtree,use.n=TRUE,cex=0.5,all=TRUE)
plot(dtree,uniform = TRUE,compress=TRUE)
text(dtree,use.n=TRUE,cex=0.5,all=TRUE)
plot(dtree,uniform = TRUE,compress=TRUE,margin=1)
plot(dtree,uniform = TRUE,compress=TRUE,margin=0.2)
text(dtree,use.n=TRUE,cex=0.5,all=TRUE)
plot(dtree,uniform = TRUE,compress=TRUE,margin=0.2)
text(dtree,use.n=TRUE,cex=0.3)
plot(dtree,uniform = TRUE,margin=0.2)
text(dtree,use.n=TRUE,cex=0.3)
plot(dtree,uniform = TRUE,margin=0.2)
text(dtree,use.n=TRUE,cex=0.5)
text(dtree,all=TRUE,cex=0.5)
plot(dtree,uniform = TRUE,margin=0.2)
text(dtree,all=TRUE,cex=0.5)
text(dtree,all=TRUE,use_n=TRUE,cex=0.5)
plot(dtree,margin=0.2)
text(dtree,all=TRUE,use.n = TRUE,cex=0.5)
text(dtree,all=TRUE,use.n = TRUE,cex=0.5)
text(dtree,all=TRUE,use.n = TRUE,cex=0.5)
printcp(decisiontree)
printcp(dtree)
printcp(dtree)
?rpart
printcp(dtree)
0.44*185
0.44324/81
0.44324*185
library(tidyverse)
library(MASS)
library(rpart)
library(naivebayes)
library(class)
library(modelr)
library(caret)
library(tree)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
library(klaR)
source("r/functions.R")
dataset<-read_csv("data/diabetes.txt",col_names=c("timespreg","plaglu",
"diastolic","triceps",
"serum","bmi","diabped",
"age","diabetes"))
plotlist<-multiplehist(dataset)
histograms<-multiplot(plotlist = plotlist,cols=3)
dataset$diabetes<-factor(dataset$diabetes,levels=c(0,1)
,labels = c("No","Yes"))
corr<-as.data.frame(cor(dataset[,-9])) %>%
rownames_to_column(var = "var1") %>%
gather(timespreg:age,key = var2,value = value)
ggplot()+geom_tile(data=corr,aes(x=var1, y=var2,fill=value))
finaldataset<-dataset[dataset$plaglu!=0,]
finaldataset<-finaldataset[finaldataset$bmi!=0,]
finaldataset<-finaldataset[,c(-4,-5)]
diastolic<-dataset[dataset$diastolic!=0,]
mu<-mean(diastolic$diastolic)
finaldataset<-mutate(finaldataset,diastolic=ifelse(diastolic==0,mu,diastolic))
rm(diastolic)
set.seed(1234)
trainidx<-createDataPartition(y = finaldataset$diabetes,
list = FALSE,p = 0.7)
train<-finaldataset[trainidx,]
notrain<-finaldataset[-trainidx,]
testidx<-createDataPartition(y=notrain$diabetes,list=FALSE,p=0.5)
test<-notrain[testidx,]
validate<-notrain[-testidx,]
table(train$diabetes)/nrow(train)
table(test$diabetes)/nrow(test)
table(validate$diabetes)/nrow(validate)
dtree<-rpart(diabetes~.,data=train,method="class")
summary(dtree)
printcp(dtree)
summary(dtree)
printcp(dtree)
prune(dtree,cp = 0.16)
prune(dtree,cp = 0.13)
prune(dtree,cp = 0.13514)
prune(dtree,cp = 0.1)
printcp(dtree)
a<-printcp(dtree)
plot(a$nsplit,a$xerror)
plot(a[,2],a$xerror[,5])
plot(a[,2],a[,5])
prune(dtree,cp = 0.1)
printcp(dtree)
prune(dtree,cp = 0.01)
prune(dtree,cp = 0.1)
prune(dtree,cp = 0.02)
dtree.prune<-prune(dtree,cp = 0.02)
dtree.pred<-predict(dtree,validate,type = "class")
dtree.pred
dtree.prune.pred<-predict(dtree.prune,validate,type="class")
plot(dtree.prune,margin=0.2)
text(dtree.prune,all=TRUE,use.n = TRUE,cex=0.5)
plot(dtree,margin=0.2)
text(dtree,all=TRUE,use.n = TRUE,cex=0.5)
confusionMatrix(data=dtree.prune.pred,reference = validate$diabetes,positive="Yes")
confusionMatrix(data=dtree.pred,reference = validate$diabetes,positive="Yes")
?tree
confusionMatrix(data=dtree.prune.pred,reference = validate$diabetes,positive="Yes")
multiplot(plotlist = plotlist,cols=3)
dtree2<-tree(diabetes~.,data=train,method = "class")
dtree2.pred<-predict(dtree2,validate,type="class")
confusionMatrix(data=dtree2.pred,reference=validate$diabetes)
dtree2<-tree(diabetes~.,data=train,method = "class")
dtree2.pred<-predict(dtree2,validate,type="class")
cv.dtree<-cv.tree(dtree2,FUN=prune.misclass)
cv.dtree2<-cv.tree(dtree2,FUN=prune.misclass)
dtree.prune2<-prune.misclass(dtree2,best=9)
dtree2.prune.pred<-predict(dtree.prune2,validate,type="class")
dtree2.prune<-prune.misclass(dtree2,best=9)
lista<-list()
missrate<-c()
for (i in 1:25){
a<-knn(train = train[,-7],test=validate[,-7],k = i,cl=validate$diabetes)
lista[[i]]<-a
missrate[i]<-mean(ifelse(lista[[i]]==validate$diabetes,FALSE,TRUE))
}
for (i in 1:25){
a<-knn(train = train[,-7],test=validate[,-7],k = i,cl=train$diabetes)
lista[[i]]<-a
missrate[i]<-mean(ifelse(lista[[i]]==validate$diabetes,FALSE,TRUE))
}
vector<-c(1:25)
plot(vector,missrate)
confusionMatrix(data=lista[[17]],reference=validate$diabetes,positive="Yes")
naivetrain<-train[,-7]
naivelabels<-train
naive<-train(naivetrain,naivelabels,"nb",trControl=trainControl(method="cv",number=10))
library(e1071)
naive<-train(naivetrain,naivelabels,"nb",trControl=trainControl(method="cv",number=10))
naivelabels<-train[,7]
naive<-train(naivetrain,naivelabels,"nb",trControl=trainControl(method="cv",number=10))
naive<-train(naivetrain,naivelabels,"nb",trControl=trainControl(method="cv",number=10))
naive<-train(naivetrain,naivelabels,"nb",trControl=trainControl(method="cv",number=10))
naivelabels<-train$diabetes
naive<-train(naivetrain,naivelabels,"nb",trControl=trainControl(method="cv",number=10))
naive.pred<-predict(naive,newdata = validate,type = "raw")
confusionMatrix(data=naive.pred,reference=validate$diabetes,positive="Yes")
dtree2.pred<-predict(dtree2,validate,type="prob")
dtree2.pred<-predict(dtree2,validate,type="vector")
View(dtree2.pred)
View(dtree2.pred)
dtree.prune.pred<-predict(dtree.prune,validate,type="prob")
ggplot()+geom_tile(data=corr,aes(x=var1, y=var2,fill=value))
plot(dataset)
ggplot()+geom_tile(data=corr,aes(x=var1, y=var2,fill=value))
ggplot()+geom_bar(data=finaldataset,x=diabetes)
ggplot()+geom_bar(data=finaldataset,aes(x=diabetes))
ggplot()+geom_bar(data=finaldataset,aes(x=diabetes),stat="bin")
ggplot()+geom_bar(data=finaldataset,aes(x=diabetes),stat="count")
table(finaldataset$diabetes)
ggplot()+geom_tile(data=corr,aes(x=var1, y=var2,fill=value))
cor(finaldataset)
cor(finaldataset[,-7])
write_csv2(cor(finaldataset[,-7]),"correlation.csv")
write_csv(cor(finaldataset[,-7]),"correlation.csv")
write_csv(as.data.frame(cor(finaldataset[,-7])),"correlation.csv")
options(scipen=15)
cor(finaldataset[,-7])
confusionMatrix(data=naive.pred,reference=validate$diabetes,positive="Yes")
ggplot()+geom_tile(data=corr,aes(x=var1, y=var2,fill=value))+geom_label(aes(label=value))
ggplot()+geom_tile(data=corr,aes(x=var1, y=var2,fill=value))+geom_label(aes(label=value))
ggplot()+geom_tile(data=corr,aes(x=var1, y=var2,fill=value))
confusionMatrix(data=lista[[17]],reference=validate$diabetes,positive="Yes")
naive
confusionMatrix(data=dtree.pred,reference = validate$diabetes,positive="Yes")
confusionMatrix(data=dtree.prune.pred,reference = validate$diabetes,positive="Yes")
dtree.prune<-prune(dtree,cp = 0.02)
dtree.prune.pred<-predict(dtree.prune,validate,type="prob")
confusionMatrix(data=dtree.prune.pred,reference = validate$diabetes,positive="Yes")
confusionMatrix(data=dtree2.pred,reference=validate$diabetes,positive="Yes")
dtree.prune.pred<-predict(dtree.prune,validate,type="class")
dtree.pred<-predict(dtree,validate,type = "class")
confusionMatrix(data=dtree.pred,reference = validate$diabetes,positive="Yes")
confusionMatrix(data=dtree.prune.pred,reference = validate$diabetes,positive="Yes")
dtree2.pred<-predict(dtree2,validate,type="class")
confusionMatrix(data=dtree2.pred,reference=validate$diabetes,positive="Yes")
dtree2.prune.pred<-predict(dtree.prune2,validate,type="class")
confusionMatrix(data=dtree2.prune.pred,reference=validate$diabetes,positive="Yes")
confusionMatrix(data=lista[[17]],reference=validate$diabetes,positive="Yes")
confusionMatrix(data=naive.pred,reference=validate$diabetes,positive="Yes")
plot(vector,missrate)
summary(dtree2)
cv.dtree2
dtree2.prune<-prune.misclass(dtree2,best=3)
dtree2.prune.pred<-predict(dtree.prune2,validate,type="class")
confusionMatrix(data=dtree2.prune.pred,reference=validate$diabetes,positive="Yes")
er<-confusionMatrix(data=naive.pred,reference=validate$diabetes,positive="Yes")
logit<-glm(diabetes~.,data=train,family=binomial(link=logit))
logit.pred<-predict(logit,newdata = validate,type="reponse")
logit.pred<-predict(logit,newdata = validate,type="response")
logit.pred.class<-ifelse(logit.pred>0.5,"Yes","No")
confusionMatrix(data=logit.pred.class,reference=validate$diabetes,positive="Yes")
confusionMatrix(data=naive.pred,reference=validate$diabetes,positive="Yes")
log(1)
log(0)
